import asyncio
import os
import hashlib
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from src.bot.exceptions import BotException
from src.bot.logic import (
    _add_new_user,
    _change_user_status,
    _remove_admin_rights,
    _set_wanna_entrance_open,
    _set_wanna_exit_open
)
from src.database import engine

logger = logging.getLogger(__name__)
TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables.")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–π Chat ID")],
        [KeyboardButton(text="üîì –û—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥"), KeyboardButton(text="üö™ –û—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")],
        [KeyboardButton(text="üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")],
    ],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–π Chat ID")],
        [KeyboardButton(text="üîì –û—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥"), KeyboardButton(text="üö™ –û—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")],
        [KeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def handle_start(message: Message):
    username = message.from_user.username
    instruction = f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n–Ø ‚Äî –ë–æ—Ç –ë–∞—Ä—å–µ—Ä ü§ñ\n\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\nüîπ /register [chat_id] ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\nüîπ /chat ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏—à–Ω–∏–∫\n\n"
    await message.answer(instruction)


@dp.message(Command("chat"))
async def handle_chat_id(message: Message):
    await message.answer(str(message.chat.id))


@dp.message(Command("register"))
async def register_command(message: Message):
    try:
        parts = message.text.split(" ", 1)
        if len(parts) != 2:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register [chat id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]")
            return

        user_chat_id = parts[1]

        async with AsyncSession(engine) as db:
            try:
                await _add_new_user(user_chat_id, message.chat.id, db)
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except BotException as exception:
                await message.reply(exception.detail)
                return
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
                await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–∑–∂–µ")
                return
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


async def main():
    try:
        print("Bot started")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("Bot stopped")
    finally:
        await bot.session.close()


ADMIN_PASSWORD_HASH = hashlib.sha256("admin228".encode()).hexdigest()

@dp.message(Command("ImAdmin"))
async def im_admin_command(message: Message):
    try:
        parts = message.text.split(" ", 1)
        if len(parts) != 2:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ImAdmin [–ø–∞—Ä–æ–ª—å]")
            return

        input_password = parts[1]
        input_password_hash = hashlib.sha256(input_password.encode()).hexdigest()

        if input_password_hash != ADMIN_PASSWORD_HASH:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            return

        async with AsyncSession(engine) as db:
            try:
                await _change_user_status(message.chat.id, db)
                await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            except BotException as be:
                await message.reply(be.detail)
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ImAdmin.")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


if __name__ == "__main__":
    asyncio.run(main())

