import asyncio
import os
import hashlib
import logging
import datetime as dt

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from src.bot.exceptions import BotException
from src.bot.logic import (
    _add_new_user,
    _change_user_status,
    _remove_admin_rights,
    _set_wanna_entrance_open,
    _set_wanna_exit_open,
    _get_day_graph
)
from src.database import engine
from src.sensors.models import Sensor, User  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã

logger = logging.getLogger(__name__)
TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables.")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–π Chat ID")],
        [KeyboardButton(text="üîì –û—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥"), KeyboardButton(text="üö™ –û—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")],
        [KeyboardButton(text="üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")],
        [KeyboardButton(text="‚Ñπ –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")],
    ],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–π Chat ID")],
        [KeyboardButton(text="üîì –û—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥"), KeyboardButton(text="üö™ –û—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")],
        [KeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
    ],
    resize_keyboard=True
)

class AdminStates(StatesGroup):
    waiting_for_register_id = State()
    waiting_for_remove_admin_id = State()

ADMIN_PASSWORD_HASH = hashlib.sha256("admin228".encode()).hexdigest()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –ë–∞—Ä—å–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=user_keyboard)

@dp.message(F.text == "üìã –ú–æ–π Chat ID")
async def handle_chat_id(message: Message):
    await message.answer(f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode="Markdown")

@dp.message(F.text == "üîì –û—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥")
async def handle_open_entrance(message: Message):
    async with AsyncSession(engine) as db:
        try:
            await _set_wanna_entrance_open(message.chat.id, db)
            await message.answer("–í—ä–µ–∑–¥ –æ—Ç–∫—Ä—ã—Ç ‚úÖ")
        except BotException as e:
            await message.answer(e.detail)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ä–µ–∑–¥–∞")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üö™ –û—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")
async def handle_open_exit(message: Message):
    async with AsyncSession(engine) as db:
        try:
            await _set_wanna_exit_open(message.chat.id, db)
            await message.answer("–í—ã–µ–∑–¥ –æ—Ç–∫—Ä—ã—Ç ‚úÖ")
        except BotException as e:
            await message.answer(e.detail)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã–µ–∑–¥–∞")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üõ° –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")
async def handle_become_admin(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

@dp.message(F.text.regexp("^admin228$"))
async def handle_admin_password(message: Message):
    async with AsyncSession(engine) as db:
        try:
            await _change_user_status(message.chat.id, db)
            await message.answer("–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚úÖ", reply_markup=admin_keyboard)
        except BotException as e:
            await message.answer(e.detail)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def register_user_prompt(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(AdminStates.waiting_for_register_id)

@dp.message(AdminStates.waiting_for_register_id)
async def register_user(message: Message, state: FSMContext):
    user_chat_id = message.text.strip()
    if not user_chat_id.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π chat ID.")
        return

    async with AsyncSession(engine) as db:
        try:
            await _add_new_user(user_chat_id, message.chat.id, db)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ")
        except BotException as e:
            await message.answer(e.detail)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_prompt(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_remove_admin_id)

@dp.message(AdminStates.waiting_for_remove_admin_id)
async def remove_admin_handler(message: Message, state: FSMContext):
    try:
        target_id = int(message.text.strip())
        async with AsyncSession(engine) as db:
            try:
                await _remove_admin_rights(target_id, message.chat.id, db)
                await message.answer(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–Ω—è—Ç—ã ‚úÖ")
            except BotException as e:
                await message.answer(e.detail)
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π chat ID.")
    await state.clear()

@dp.message(F.text == "üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def handle_view_stats(message: Message):
    async with AsyncSession(engine) as db:
        try:
            date = dt.date.today()
            image_path = await _get_day_graph(db, date)
            photo = FSInputFile(image_path)
            await message.answer_photo(photo, caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date.strftime('%d.%m.%Y')}")
        except BotException as e:
            await message.answer(e.detail)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(F.text == "‚Ñπ –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")
async def handle_free_places(message: Message):
    async with AsyncSession(engine) as db:
        try:
            result = await db.execute(select(Sensor.free_places).order_by(Sensor.id.desc()).limit(1))
            free_places = result.scalar_one_or_none()

            if free_places is not None:
                await message.answer(f"üöó –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {free_places}")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–æ–≤–∫–µ.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ä–æ–≤–Ω–µ CO2 ---

alert_sent = False

async def get_all_users(db: AsyncSession):
    result = await db.execute(select(User.chat_id))
    return [row[0] for row in result.all()]

async def notify_high_co2():
    global alert_sent
    async with AsyncSession(engine) as db:
        result = await db.execute(select(Sensor.co2).order_by(Sensor.id.desc()).limit(1))
        latest_co2 = result.scalar_one_or_none()

        if latest_co2 is None:
            return

        if latest_co2 > 700 and not alert_sent:
            user_ids = await get_all_users(db)
            for user_id in user_ids:
                try:
                    await bot.send_message(user_id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å CO‚ÇÇ!")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            alert_sent = True

        if latest_co2 <= 700:
            alert_sent = False

async def periodic_co2_check():
    while True:
        try:
            await notify_high_co2()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CO‚ÇÇ: {e}")
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

async def main():
    print("Bot started")
    asyncio.create_task(periodic_co2_check())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
